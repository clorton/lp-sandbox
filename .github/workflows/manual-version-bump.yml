name: Manual major/minor version bump and build

on:
    workflow_dispatch:
      inputs:
        version_type:
          description: 'Type of version bump (patch, minor, major)'
          required: true
          default: 'patch'
        dry_run:
          description: 'Dry run (true/false)'
          required: false
          default: 'false'

jobs:
  test:
    name: Run tests on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest] # [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]

      - name: Run tests
        run: |
          pytest

  bump-and-build:
    name: Bump version and build package
    permissions:
      contents: write
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Print inputs
        run: |
          echo "Version type: ${{ github.event.inputs.version_type }}"
          echo "Dry run: ${{ github.event.inputs.dry_run }}"

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install bump-my-version and build tools
        run: |
          python -m pip install --upgrade pip
          pip install bump-my-version build

      - name: Bump patch version
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          DRY_FLAG="${{ github.event.inputs.dry_run == 'true' && '--dry-run' || '' }}"  # convert true/false to --dry-run or empty string
          bump-my-version bump ${{ github.event.inputs.version_type }} $DRY_FLAG

      - name: Push changes and tag
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git push origin HEAD:main
          git push origin v$(bump-my-version show current_version)

      - name: Build package
        run: python -m build

      - name: Upload artifacts to release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          tag_name=v$(bump-my-version show current_version)
          gh release create "$tag_name" dist/* --title "$tag_name" --notes "Automated release for $tag_name" || \
          gh release upload "$tag_name" dist/*
